diff -rupN -x label -x '*.orig' -x '*.rej' -x '*~' -x .git old/include/Pythia8/InfoHub.h new/include/Pythia8/InfoHub.h
--- old/include/Pythia8/InfoHub.h	2020-04-12 20:33:13.423042856 +0100
+++ new/include/Pythia8/InfoHub.h	2020-04-12 20:39:58.414848374 +0100
@@ -943,13 +943,13 @@ public:
   int    iBMPI(int i)         const {return infoHubPtr->iBMPISave[i];}
 
   // Cross section estimate, optionally process by process.
-  vector<int> codesHard()     {return infoHubPtr->codesHard();}
-  string nameProc(int i = 0)  {return infoHubPtr->nameProc(i);}
-  long   nTried(int i = 0)    {return infoHubPtr->nTried(i);}
-  long   nSelected(int i = 0) {return infoHubPtr->nSelected(i);}
-  long   nAccepted(int i = 0) {return infoHubPtr->nAccepted(i);}
-  double sigmaGen(int i = 0)  {return infoHubPtr->sigmaGen(i);}
-  double sigmaErr(int i = 0)  {return infoHubPtr->sigmaErr(i);}
+  vector<int> codesHard()     const {return infoHubPtr->codesHard();}
+  string nameProc(int i = 0)  const {return infoHubPtr->nameProc(i);}
+  long   nTried(int i = 0)    const {return infoHubPtr->nTried(i);}
+  long   nSelected(int i = 0) const {return infoHubPtr->nSelected(i);}
+  long   nAccepted(int i = 0) const {return infoHubPtr->nAccepted(i);}
+  double sigmaGen(int i = 0)  const {return infoHubPtr->sigmaGen(i);}
+  double sigmaErr(int i = 0)  const {return infoHubPtr->sigmaErr(i);}
 
   // Counters for number of loops in various places.
   int    getCounter( int i)   const {return infoHubPtr->counters[i];}
diff -rupN -x label -x '*.orig' -x '*.rej' -x '*~' -x .git old/include/Pythia8/Pythia.h new/include/Pythia8/Pythia.h
--- old/include/Pythia8/Pythia.h	2020-04-12 20:33:13.423042856 +0100
+++ new/include/Pythia8/Pythia.h	2020-04-12 20:33:13.551044052 +0100
@@ -291,13 +291,13 @@ public:
   BeamParticle   beamA = {};
   BeamParticle   beamB = {};
 
-private:
-
   // The main keeper/collector of information, accessible from all
   // PhysicsBase objects. The information is available from the
   // outside through the public info object.
   InfoHub         infoHub = {};
 
+private:
+
   // Initialise new Pythia object (called by constructors).
   void initPtrs();
 
diff -rupN -x label -x '*.orig' -x '*.rej' -x '*~' -x .git old/Makefile new/Makefile
--- old/Makefile	2020-04-12 20:33:13.375042409 +0100
+++ new/Makefile	2020-04-12 20:33:13.495043530 +0100
@@ -31,7 +31,7 @@ LOCAL_SHARE=share/Pythia8
 LOCAL_SRC=src
 LOCAL_TMP=tmp
 LOCAL_MKDIRS:=$(shell mkdir -p $(LOCAL_TMP) $(LOCAL_LIB))
-CXX_COMMON:=-I$(LOCAL_INCLUDE) $(CXX_COMMON)
+CXX_COMMON:=-I$(LOCAL_INCLUDE) $(CXX_COMMON) -std=c++11
 
 # PYTHIA.
 OBJECTS=$(patsubst $(LOCAL_SRC)/%.cc,$(LOCAL_TMP)/%.o,\
diff -rupN -x label -x '*.orig' -x '*.rej' -x '*~' -x .git old/private/tests/test112.cc new/private/tests/test112.cc
--- old/private/tests/test112.cc	2020-04-12 20:33:13.443043044 +0100
+++ new/private/tests/test112.cc	2020-04-12 20:40:41.423254462 +0100
@@ -119,8 +119,8 @@ int main() {
 
     // Also fill the number of (absorptively and diffractively)
     // wounded nucleaons.
-    int nw = pythia.info.hiInfo->nAbsTarg() +
-      pythia.info.hiInfo->nDiffTarg();
+    int nw = pythia.info.hiInfo()->nAbsTarg() +
+      pythia.info.hiInfo()->nDiffTarg();
     wounded.fill(nw, weight);
 
     // Find the correct centrality histograms.
